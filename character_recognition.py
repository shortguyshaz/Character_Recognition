# -*- coding: utf-8 -*-
"""Character_Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MQKaA5eL049NnHPYARp_6Mi86Xtwvgq3
"""

import numpy as np
import pandas as pd
import cv2
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, Dropout, MaxPool2D
from keras.optimizers import SGD, Adam
from keras.callbacks import ReduceLROnPlateau, EarlyStopping
from keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
from google.colab import drive

drive.mount('/content/gdrive')

data = pd.read_csv("/content/gdrive/My Drive/A_Z Handwritten Data.csv").astype('float32')
data

x = data.drop('0', axis = 1)
y = data['0']

train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.2)

train_x = np.reshape(train_x.values, (train_x.shape[0], 28, 28))
test_x = np.reshape(test_x.values, (test_x.shape[0], 28, 28))

print("Train data shape: ", train_x.shape)
print("Test data shape: ", test_x.shape)

char_dict = {0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X', 24:'Y',25:'Z'}

y_int = np.int0(y)
count = np.zeros(26, dtype='int')
for i in y_int:
    count[i] += 1

alphabets = []
for i in char_dict.values():
    alphabets.append(i)

fig, ax = plt.subplots(1, 1, figsize=(10, 10))
ax.barh(alphabets, count)

plt.xlabel("Number of elements")
plt.ylabel("Alphabets")
plt.grid()
plt.show()

shuff = shuffle(train_x[: 100])

fig, ax = plt.subplots(3, 3, figsize=(10, 10))
axes = ax.flatten()

for i in range(9):
    axes[i].imshow(np.reshape(shuff[i], (28, 28)), cmap='Greys')
plt.show()

train_x = train_x.reshape(train_x.shape[0], train_x.shape[1], train_x.shape[2], 1)
print("New shape of train data: ", train_x.shape)

test_x = test_x.reshape(test_x.shape[0], test_x.shape[1], test_x.shape[2], 1)
print("New shape of test data: ", test_x.shape)

train_yOHE = to_categorical(train_y, num_classes = 26, dtype='int')
print("New shape of train labels: ", train_yOHE.shape)
test_yOHE = to_categorical(test_y, num_classes= 26, dtype='int')
print("New shape of test labels: ", test_yOHE.shape)

model = Sequential()

layer_1 = Conv2D(filters=32, kernel_size=(3, 3),  activation='relu', input_shape=(28, 28, 1))
layer_2 = MaxPool2D(pool_size=(2, 2), strides=2)
layer_3 = Conv2D(filters=64, kernel_size=(3, 3),  activation='relu', padding='same')
layer_4 = MaxPool2D(pool_size=(2, 2), strides=2)
layer_5 = Conv2D(filters=128, kernel_size=(3, 3),  activation='relu', padding='valid')
layer_6 = MaxPool2D(pool_size=(2, 2), strides=2)
layer_7 = Flatten()
layer_8 = Dense(64, activation='relu')
layer_9 = Dense(128, activation='relu')
layer_10 = Dense(26, activation='softmax')

model.add(layer_1)
model.add(layer_2)
model.add(layer_3)
model.add(layer_4)
model.add(layer_5)
model.add(layer_6)
model.add(layer_7)
model.add(layer_8)
model.add(layer_9)
model.add(layer_10)

model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])
history = model.fit(train_x, train_yOHE, epochs=2, validation_data=(test_x, test_yOHE))

model.summary()
model.save('char_model.h5')

print("The validation accuracy is :", history.history['val_accuracy'])
print("The training accuracy is :", history.history['accuracy'])
print("The validation loss is :", history.history['val_loss'])
print("The training loss is :", history.history['loss'])

fig, axes = plt.subplots(3, 3, figsize=(8, 9))
axes = axes.flatten()

for i, ax in enumerate(axes):
    img = np.reshape(test_x[i], (28, 28))
    ax.imshow(img, cmap='Greys')

    pred = char_dict[np.argmax(test_yOHE[i])]
    ax.set_title("Prediction: "+pred)
    ax.grid()

from google.colab import files
uploaded = files.upload()

img = cv2.imread('sample.jpg')
img_copy = img.copy()

img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img = cv2.resize(img, (400, 440))

img_copy = cv2.GaussianBlur(img_copy, (7, 7), 0)
img_gray = cv2.cvtColor(img_copy, cv2.COLOR_BGR2GRAY)
_, img_thresh = cv2.threshold(img_gray, 100, 255, cv2.THRESH_BINARY_INV)

img_final = cv2.resize(img_thresh, (28, 28))
img_final = np.reshape(img_final, (1, 28, 28, 1))

plt.imshow(img, cmap='gray')
char_dict[np.argmax(model.predict(img_final))]